// Generated by the protocol buffer compiler.  DO NOT EDIT!

package com.android.launcher3.tracing.nano;

@SuppressWarnings("hiding")
public final class LauncherTraceFileProto extends
    com.google.protobuf.nano.MessageNano {

  // enum MagicNumber
  public interface MagicNumber {
    public static final int INVALID = 0;
    public static final int MAGIC_NUMBER_L = 1212370508;
    public static final int MAGIC_NUMBER_H = 1129469010;
  }

  private static volatile LauncherTraceFileProto[] _emptyArray;
  public static LauncherTraceFileProto[] emptyArray() {
    // Lazily initializes the empty array
    if (_emptyArray == null) {
      synchronized (
          com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
        if (_emptyArray == null) {
          _emptyArray = new LauncherTraceFileProto[0];
        }
      }
    }
    return _emptyArray;
  }

  // optional fixed64 magic_number = 1;
  public long magicNumber;

  // repeated .com.android.launcher3.tracing.nano.LauncherTraceEntryProto entry = 2;
  public LauncherTraceEntryProto[] entry;

  public LauncherTraceFileProto() {
    clear();
  }

  public LauncherTraceFileProto clear() {
    magicNumber = 0L;
    entry = LauncherTraceEntryProto.emptyArray();
    cachedSize = -1;
    return this;
  }

  @Override
  public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
      throws java.io.IOException {
    if (this.magicNumber != 0L) {
      output.writeFixed64(1, this.magicNumber);
    }
    if (this.entry != null && this.entry.length > 0) {
      for (int i = 0; i < this.entry.length; i++) {
        LauncherTraceEntryProto element = this.entry[i];
        if (element != null) {
          output.writeMessage(2, element);
        }
      }
    }
    super.writeTo(output);
  }

  @Override
  protected int computeSerializedSize() {
    int size = super.computeSerializedSize();
    if (this.magicNumber != 0L) {
      size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeFixed64Size(1, this.magicNumber);
    }
    if (this.entry != null && this.entry.length > 0) {
      for (int i = 0; i < this.entry.length; i++) {
        LauncherTraceEntryProto element = this.entry[i];
        if (element != null) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeMessageSize(2, element);
        }
      }
    }
    return size;
  }

  @Override
  public LauncherTraceFileProto mergeFrom(
          com.google.protobuf.nano.CodedInputByteBufferNano input)
      throws java.io.IOException {
    while (true) {
      int tag = input.readTag();
      switch (tag) {
        case 0:
          return this;
        default: {
          if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
            return this;
          }
          break;
        }
        case 9: {
          this.magicNumber = input.readFixed64();
          break;
        }
        case 18: {
          int arrayLength = com.google.protobuf.nano.WireFormatNano
              .getRepeatedFieldArrayLength(input, 18);
          int i = this.entry == null ? 0 : this.entry.length;
          LauncherTraceEntryProto[] newArray =
              new LauncherTraceEntryProto[i + arrayLength];
          if (i != 0) {
            System.arraycopy(this.entry, 0, newArray, 0, i);
          }
          for (; i < newArray.length - 1; i++) {
            newArray[i] = new LauncherTraceEntryProto();
            input.readMessage(newArray[i]);
            input.readTag();
          }
          // Last one without readTag.
          newArray[i] = new LauncherTraceEntryProto();
          input.readMessage(newArray[i]);
          this.entry = newArray;
          break;
        }
      }
    }
  }

  public static LauncherTraceFileProto parseFrom(byte[] data)
      throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
    return com.google.protobuf.nano.MessageNano.mergeFrom(new LauncherTraceFileProto(), data);
  }

  public static LauncherTraceFileProto parseFrom(
          com.google.protobuf.nano.CodedInputByteBufferNano input)
      throws java.io.IOException {
    return new LauncherTraceFileProto().mergeFrom(input);
  }
}
